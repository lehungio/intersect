// Generated by CoffeeScript 1.12.7
(function() {
  var AABB, AABBAABBExample, AABBPointExample, AABBSegmentExample, AABBSweptAABBExample, Example, MultipleAABBSweptAABBExample, Point, ready,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AABB = intersect.AABB, Point = intersect.Point;

  Example = (function() {
    function Example(context1, width1, height1) {
      this.context = context1;
      this.width = width1;
      this.height = height1;
      this.origin = new Point(this.width * 0.5, this.height * 0.5);
      this.infiniteLength = Math.sqrt(this.width * this.width + this.height * this.height);
    }

    Example.prototype.drawAABB = function(box, color, thickness) {
      var x1, x2, y1, y2;
      if (color == null) {
        color = '#fff';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x1 = Math.floor(this.origin.x + box.pos.x - box.half.x);
      y1 = Math.floor(this.origin.y + box.pos.y - box.half.y);
      x2 = Math.floor(this.origin.x + box.pos.x + box.half.x);
      y2 = Math.floor(this.origin.y + box.pos.y + box.half.y);
      this.context.beginPath();
      this.context.moveTo(x1, y1);
      this.context.lineTo(x2, y1);
      this.context.lineTo(x2, y2);
      this.context.lineTo(x1, y2);
      this.context.lineTo(x1, y1);
      this.context.closePath();
      this.context.lineWidth = thickness;
      this.context.strokeStyle = color;
      return this.context.stroke();
    };

    Example.prototype.drawCircle = function(circle, color, thickness) {
      var x, y;
      if (color == null) {
        color = '#fff';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x = Math.floor(this.origin.x + circle.pos.x);
      y = Math.floor(this.origin.y + circle.pos.y);
      this.context.beginPath();
      this.context.arc(x, y, circle.radius, 0, 2 * Math.PI, true);
      this.context.closePath();
      this.context.lineWidth = thickness;
      this.context.strokeStyle = color;
      return this.context.stroke();
    };

    Example.prototype.drawPoint = function(point, color, text, thickness) {
      var x, y;
      if (color == null) {
        color = '#fff';
      }
      if (text == null) {
        text = '';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x = Math.floor(this.origin.x + point.x - (thickness / 2));
      y = Math.floor(this.origin.y + point.y - (thickness / 2));
      this.context.lineWidth = thickness;
      this.context.fillStyle = color;
      this.context.strokeStyle = color;
      this.context.fillRect(x, y, thickness, thickness);
      this.context.strokeRect(x, y, thickness, thickness);
      if (text) {
        return this.context.fillText(text, x + thickness * 4, y + thickness * 2);
      }
    };

    Example.prototype.drawRay = function(pos, dir, length, color, arrow, thickness) {
      var pos2;
      if (color == null) {
        color = '#fff';
      }
      if (arrow == null) {
        arrow = true;
      }
      if (thickness == null) {
        thickness = 1;
      }
      pos2 = new Point(pos.x + dir.x * length, pos.y + dir.y * length);
      this.drawSegment(pos, pos2, color, thickness);
      if (arrow) {
        pos = pos2.clone();
        pos2.x = pos.x - dir.x * 4 + dir.y * 4;
        pos2.y = pos.y - dir.y * 4 - dir.x * 4;
        this.drawSegment(pos, pos2, color, thickness);
        pos2.x = pos.x - dir.x * 4 - dir.y * 4;
        pos2.y = pos.y - dir.y * 4 + dir.x * 4;
        return this.drawSegment(pos, pos2, color, thickness);
      }
    };

    Example.prototype.drawSegment = function(point1, point2, color, thickness) {
      var x1, x2, y1, y2;
      if (color == null) {
        color = '#fff';
      }
      if (thickness == null) {
        thickness = 1;
      }
      x1 = Math.floor(this.origin.x + point1.x);
      y1 = Math.floor(this.origin.y + point1.y);
      x2 = Math.floor(this.origin.x + point2.x);
      y2 = Math.floor(this.origin.y + point2.y);
      this.context.beginPath();
      this.context.moveTo(x1, y1);
      this.context.lineTo(x2, y2);
      this.context.closePath();
      this.context.lineWidth = thickness;
      this.context.strokeStyle = color;
      return this.context.stroke();
    };

    Example.prototype.tick = function(elapsed) {
      this.context.fillStyle = '#000';
      return this.context.fillRect(0, 0, this.width, this.height);
    };

    return Example;

  })();

  AABBPointExample = (function(superClass) {
    extend(AABBPointExample, superClass);

    function AABBPointExample() {
      AABBPointExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.pos = new Point();
      this.box = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBPointExample.prototype.tick = function(elapsed) {
      var hit;
      AABBPointExample.__super__.tick.apply(this, arguments);
      this.angle += 0.5 * Math.PI * elapsed;
      this.pos.x = Math.cos(this.angle * 0.4) * 32;
      this.pos.y = Math.sin(this.angle) * 12;
      hit = this.box.intersectPoint(this.pos);
      this.drawAABB(this.box, '#666');
      if (hit) {
        this.drawPoint(this.pos, '#f00');
        return this.drawPoint(hit.pos, '#ff0');
      } else {
        return this.drawPoint(this.pos, '#0f0');
      }
    };

    return AABBPointExample;

  })(Example);

  AABBSegmentExample = (function(superClass) {
    extend(AABBSegmentExample, superClass);

    function AABBSegmentExample() {
      AABBSegmentExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.box = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBSegmentExample.prototype.tick = function(elapsed) {
      var delta, dir, hit, length, pos1, pos2;
      AABBSegmentExample.__super__.tick.apply(this, arguments);
      this.angle += 0.5 * Math.PI * elapsed;
      pos1 = new Point(Math.cos(this.angle) * 64, Math.sin(this.angle) * 64);
      pos2 = new Point(Math.sin(this.angle) * 32, Math.cos(this.angle) * 32);
      delta = new Point(pos2.x - pos1.x, pos2.y - pos1.y);
      hit = this.box.intersectSegment(pos1, delta);
      dir = delta.clone();
      length = dir.normalize();
      this.drawAABB(this.box, '#666');
      if (hit != null) {
        this.drawRay(pos1, dir, length, '#f00');
        this.drawSegment(pos1, hit.pos, '#ff0');
        this.drawPoint(hit.pos, '#ff0');
        return this.drawRay(hit.pos, hit.normal, 6, '#ff0', false);
      } else {
        return this.drawRay(pos1, dir, length, '#0f0');
      }
    };

    return AABBSegmentExample;

  })(Example);

  AABBAABBExample = (function(superClass) {
    extend(AABBAABBExample, superClass);

    function AABBAABBExample() {
      AABBAABBExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.box1 = new AABB(new Point(0, 0), new Point(64, 16));
      this.box2 = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBAABBExample.prototype.tick = function(elapsed) {
      var hit;
      AABBAABBExample.__super__.tick.apply(this, arguments);
      this.angle += 0.2 * Math.PI * elapsed;
      this.box2.pos.x = Math.cos(this.angle) * 96;
      this.box2.pos.y = Math.sin(this.angle * 2.4) * 24;
      hit = this.box1.intersectAABB(this.box2);
      this.drawAABB(this.box1, '#666');
      if (hit != null) {
        this.drawAABB(this.box2, '#f00');
        this.box2.pos.x += hit.delta.x;
        this.box2.pos.y += hit.delta.y;
        this.drawAABB(this.box2, '#ff0');
        this.drawPoint(hit.pos, '#ff0');
        return this.drawRay(hit.pos, hit.normal, 4, '#ff0', false);
      } else {
        return this.drawAABB(this.box2, '#0f0');
      }
    };

    return AABBAABBExample;

  })(Example);

  AABBSweptAABBExample = (function(superClass) {
    extend(AABBSweptAABBExample, superClass);

    function AABBSweptAABBExample() {
      AABBSweptAABBExample.__super__.constructor.apply(this, arguments);
      this.angle = 0;
      this.staticBox = new AABB(new Point(0, 0), new Point(112, 16));
      this.sweepBoxes = [new AABB(new Point(-152, 24), new Point(16, 16)), new AABB(new Point(128, -48), new Point(16, 16))];
      this.sweepDeltas = [new Point(64, -12), new Point(-32, 96)];
      this.tempBox = new AABB(new Point(0, 0), new Point(16, 16));
    }

    AABBSweptAABBExample.prototype.tick = function(elapsed) {
      var box, delta, dir, factor, i, j, len, length, ref, results, sweep;
      AABBSweptAABBExample.__super__.tick.apply(this, arguments);
      this.angle += 0.5 * Math.PI * elapsed;
      this.drawAABB(this.staticBox, '#666');
      factor = ((Math.cos(this.angle) + 1) * 0.5) || 1e-8;
      ref = this.sweepBoxes;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        box = ref[i];
        delta = this.sweepDeltas[i].clone();
        delta.x *= factor;
        delta.y *= factor;
        sweep = this.staticBox.sweepAABB(box, delta);
        dir = delta.clone();
        length = dir.normalize();
        this.drawAABB(box, '#666');
        if (sweep.hit != null) {
          this.drawRay(box.pos, dir, length, '#f00');
          this.tempBox.pos.x = box.pos.x + delta.x;
          this.tempBox.pos.y = box.pos.y + delta.y;
          this.drawAABB(this.tempBox, '#f00');
          this.tempBox.pos.x = sweep.pos.x;
          this.tempBox.pos.y = sweep.pos.y;
          this.drawAABB(this.tempBox, '#ff0');
          this.drawPoint(sweep.hit.pos, '#ff0');
          results.push(this.drawRay(sweep.hit.pos, sweep.hit.normal, 4, '#ff0', false));
        } else {
          this.tempBox.pos.x = sweep.pos.x;
          this.tempBox.pos.y = sweep.pos.y;
          this.drawAABB(this.tempBox, '#0f0');
          results.push(this.drawRay(box.pos, dir, length, '#0f0'));
        }
      }
      return results;
    };

    return AABBSweptAABBExample;

  })(Example);

  MultipleAABBSweptAABBExample = (function(superClass) {
    extend(MultipleAABBSweptAABBExample, superClass);

    function MultipleAABBSweptAABBExample() {
      MultipleAABBSweptAABBExample.__super__.constructor.apply(this, arguments);
      this.delta = new Point;
      this.velocity = new Point(48, 48);
      this.movingBox = new AABB(new Point(0, 0), new Point(8, 8));
      this.staticBoxes = [new AABB(new Point(-96, 0), new Point(8, 48)), new AABB(new Point(96, 0), new Point(8, 48)), new AABB(new Point(0, -56), new Point(104, 8)), new AABB(new Point(0, 56), new Point(104, 8))];
    }

    MultipleAABBSweptAABBExample.prototype.reflect = function(velocity, normal, out) {
      var dot, ux, uy, wx, wy;
      dot = velocity.x * normal.x + velocity.y * normal.y;
      ux = normal.x * dot;
      uy = normal.y * dot;
      wx = velocity.x - ux;
      wy = velocity.y - uy;
      out.x = wx - ux;
      return out.y = wy - uy;
    };

    MultipleAABBSweptAABBExample.prototype.tick = function(elapsed) {
      var j, len, ref, staticBox, sweep;
      MultipleAABBSweptAABBExample.__super__.tick.apply(this, arguments);
      this.delta.x = this.velocity.x * elapsed;
      this.delta.y = this.velocity.y * elapsed;
      sweep = this.movingBox.sweepInto(this.staticBoxes, this.delta);
      if (sweep.hit) {
        this.reflect(this.velocity, sweep.hit.normal, this.velocity);
      }
      ref = this.staticBoxes;
      for (j = 0, len = ref.length; j < len; j++) {
        staticBox = ref[j];
        if (sweep.hit && sweep.hit.collider === staticBox) {
          this.drawAABB(staticBox, '#aaa');
        } else {
          this.drawAABB(staticBox, '#666');
        }
      }
      this.movingBox.pos = sweep.pos;
      return this.drawAABB(this.movingBox, sweep.hit ? '#ff0' : '#0f0');
    };

    return MultipleAABBSweptAABBExample;

  })(Example);

  ready = function(callback) {
    var handler;
    if (document.readyState === 'complete') {
      return setTimeout(callback, 1);
    } else {
      handler = function() {
        document.removeEventListener('DOMContentLoaded', handler, false);
        return callback();
      };
      return document.addEventListener('DOMContentLoaded', handler, false);
    }
  };

  ready(function() {
    var anchor, canvas, context, example, exampleConstructor, exampleIds, examples, height, id, width;
    exampleIds = {
      'aabb-vs-point': AABBPointExample,
      'aabb-vs-segment': AABBSegmentExample,
      'aabb-vs-aabb': AABBAABBExample,
      'aabb-vs-swept-aabb': AABBSweptAABBExample,
      'sweeping-an-aabb-through-multiple-objects': MultipleAABBSweptAABBExample
    };
    examples = [];
    for (id in exampleIds) {
      exampleConstructor = exampleIds[id];
      anchor = document.getElementById(id);
      if (anchor) {
        canvas = document.createElement('canvas');
        anchor.parentNode.insertBefore(canvas, anchor.nextSibling);
        width = canvas.width = 640;
        height = canvas.height = 160;
        context = canvas.getContext('2d');
        context.translate(0.5, 0.5);
        example = new exampleConstructor(context, width, height);
        if (example) {
          examples.push(example);
        }
      }
    }
    return setInterval(function() {
      var j, len, results;
      results = [];
      for (j = 0, len = examples.length; j < len; j++) {
        example = examples[j];
        results.push(example.tick(1 / 30));
      }
      return results;
    }, 1000 / 30);
  });

}).call(this);

//# sourceMappingURL=examples.js.map
